{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "occupied",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "durationInPreviousState",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "vehicleRegisteration",
						"type": "string"
					}
				],
				"name": "SensorReadingUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "x",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					}
				],
				"name": "SensorRegistered",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "_x",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "_y",
						"type": "int256"
					}
				],
				"name": "RegisterSensor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getParkingReservation",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "getSensorData",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "int256",
								"name": "x",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "y",
								"type": "int256"
							},
							{
								"internalType": "bool",
								"name": "occupied",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "modifiedTimeStamp",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "vehicleRegisteration",
								"type": "string"
							},
							{
								"internalType": "bool",
								"name": "registered",
								"type": "bool"
							}
						],
						"internalType": "struct SmartParking.Sensor",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_occupied",
						"type": "bool"
					},
					{
						"internalType": "string",
						"name": "_vehicleRegisteration",
						"type": "string"
					}
				],
				"name": "updateSensorReadings",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This contract manages smartparking system and associated spaces",
			"kind": "dev",
			"methods": {
				"RegisterSensor(uint256,int256,int256)": {
					"params": {
						"_id": "Sensor id.",
						"_x": "Longitude location of sensor.",
						"_y": "Latitude location of sensor."
					}
				},
				"getParkingReservation(uint256)": {
					"params": {
						"_tokenId": "The amount to increment the counter by."
					},
					"returns": {
						"_0": "Parking space status"
					}
				},
				"getSensorData(uint256)": {
					"params": {
						"_id": "The amount to increment the counter by."
					},
					"returns": {
						"_0": "Sensor data type pertaining to supplied sensor id."
					}
				},
				"updateSensorReadings(uint256,bool,string)": {
					"params": {
						"_id": "Sensor id.",
						"_occupied": "Current sensor state.",
						"_vehicleRegisteration": "Registeration of vehicle currently occupying."
					}
				}
			},
			"title": "SmartParking Contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"RegisterSensor(uint256,int256,int256)": {
					"notice": "Function to register sensor with contract."
				},
				"getParkingReservation(uint256)": {
					"notice": "Test function to check parking space reservations in ParkingSpace Contract."
				},
				"getSensorData(uint256)": {
					"notice": "Function to retreive all parking sensor data."
				},
				"updateSensorReadings(uint256,bool,string)": {
					"notice": "Mutating function to update register sesnors data"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/SmartParking.sol": "SmartParking"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e",
			"license": "MIT",
			"urls": [
				"bzz-raw://3490d794728f5bfecb46820431adaff71ba374141545ec20b650bb60353fac23",
				"dweb:/ipfs/QmPsfxjVpMcZbpE7BH93DzTpEaktESigEw4SmDzkXuJ4WR"
			]
		},
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x6ead281d4569c26b3dee7313aefff24add906f3600b57d8aef1255a17d6b34e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://aec0f9c9f14f829353663e1946bf0ea00a1771ff6ddb4f7cbe14893397b4b55c",
				"dweb:/ipfs/QmVMR3SdijdM2BpL9Yp3u7Riaxqgs1FnZ1Rfg2CMjKGtVS"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xf78f05f3b8c9f75570e85300d7b4600d7f6f6a198449273f31d44c1641adb46f",
			"license": "MIT",
			"urls": [
				"bzz-raw://e28b872613b45e0e801d4995aa4380be2531147bfe2d85c1d6275f1de514fba3",
				"dweb:/ipfs/QmeeFcfShHYaS3BdgVj78nxR28ZaVUwbvr66ud8bT6kzw9"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x88cd5e3bee2e8c36b8d9058fbcaa81ad5704281b25634122234b55ea853d8055",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dc7e7ab5b8ea36c15027ab04221b05d1c970f47a53e9fd47ead8ca665d49c7e",
				"dweb:/ipfs/Qmeeph7fsDyfRr8vb2L8KcDEmKPb224TAayMvgqgGAnqpL"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0xf46268c37522320bb2119a5a394bc5c739a95c0c574c8d08e8c643f4d06e5c76",
			"license": "MIT",
			"urls": [
				"bzz-raw://517e4b295f35b9947c72ad7379a6089439ece7bb6f4a2ea0a159da13046c039e",
				"dweb:/ipfs/QmZXzkSfLUbvujig3zVbpDHykpHhqLpvQtdiN3B5j4TA3u"
			]
		},
		"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol": {
			"keccak256": "0xc2dfdc8fbc8fdb142575c90568e237b809a1feaccff23e32d00131887a08dc36",
			"license": "MIT",
			"urls": [
				"bzz-raw://dbc1d283ee77da43d61661b5ba1adeb427d6a6224335494a9a857dce41d9f1d6",
				"dweb:/ipfs/QmTnA35z7XzkxFSRUqB6CGVH1nhmvajwnDNfA5PiKmYuCi"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://15e3599867c2182f5831e9268b274b2ef2047825837df6b4d81c9e89254b093e",
				"dweb:/ipfs/QmZbL7XAYr5RmaNaooPgZRmcDXaudfsYQfYD9y5iAECvpS"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e",
			"license": "MIT",
			"urls": [
				"bzz-raw://81233d1f98060113d9922180bb0f14f8335856fe9f339134b09335e9f678c377",
				"dweb:/ipfs/QmWh6R35SarhAn4z2wH8SU456jJSYL2FgucfTFgbHJJN4E"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
			"license": "MIT",
			"urls": [
				"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
				"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"contracts/ParkingSpace.sol": {
			"keccak256": "0x0532fffed5459c9d7674dfb94fdc20305da77c17773138a708dd80c668d7feda",
			"license": "MIT",
			"urls": [
				"bzz-raw://f0692127a30a3811ced8eea60e3a5ad4b580b6a5268d98068fc291a427a3af86",
				"dweb:/ipfs/QmcKQq5hC5wU5LSiV3ac6fne3oicGgXKnWi5r2MmCVQf2W"
			]
		},
		"contracts/SmartParking.sol": {
			"keccak256": "0x1a57b765ad054cdcfb6cd3f8a2e3d2a2d35ed97782ac94971e6b4d60142cb082",
			"license": "MIT",
			"urls": [
				"bzz-raw://6823665d55399ed984ced84c86e92c1cac3441fe1bbb2afbac1072840fb409a7",
				"dweb:/ipfs/QmR35UYMhH7sVmkSBy3oG1etEJ3qXdzWYjgdiExGXPQnUi"
			]
		},
		"contracts/helpers/GeoHelpers.sol": {
			"keccak256": "0xda2783ab10ceec28ffa7045290d5f0abe707ea4649927b4c59e22f2fc8070107",
			"license": "MIT",
			"urls": [
				"bzz-raw://088bb64d4490585f6d4eb473cf84993cee1d7fad2a8aebeb4466f3c9d79550dc",
				"dweb:/ipfs/QmRaDPbXeaqwQn4quAK2qeyGHyMyX2RVm41i49BPNcy8Zp"
			]
		},
		"contracts/helpers/StringHelpers.sol": {
			"keccak256": "0x4f6bee261d5891ce6e34d121780dec6382be63fb2b38c7e0e805106c406f0dcf",
			"license": "MIT",
			"urls": [
				"bzz-raw://b78dee1da52818435b76d339e1859b86279d8d4f86cb1ec211d3299389c77c5b",
				"dweb:/ipfs/Qmaif786NNd3qPBB8KiVw6LvvvAtZbYvykaFGZrPPcUJS1"
			]
		}
	},
	"version": 1
}